# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from turtle import left, right
from PyQt5 import QtCore, QtGui, QtWidgets
from tkinter import Tk
from tkinter.filedialog import askopenfilename
import  face_recognition
import cv2
from tables import Unknown


### Face_recognition ###
# first 'pip install cmake'
#Se você tiver o conda instalado em seu sistema, siga este processo.

#conda create -n py36 python=3.6
#activate py36
#conda config --add channels conda-forge
#conda install numpy
#conda install scipy
#conda install dlib
#Aqui eu instalo o face_recognition uma vez para garantir que todas as dependências sejam incluídas.

#pip install face_recognition

#Observe que aqui a instalação falhará porque o pip não detectou o dlib conda instalado anteriormente



#pip install --no-dependencies face_recognition

#Isso deve concluir a instalação.
# second 'pip install face_recognition'

# Mesmo fazendo tudo isso para mim ainda não funcionou então tive que ir no terminal no visual studio e
# instalar pip install "C:\Users\jesus\Install-dlib\dlib-19.22.99-cp39-cp39-win_amd64.whl"
# o link onde você pode encontrar esse arquvo link https://github.com/datamagic2020/Install-dlib
# aí depois installei o pip install cmake
# E funcionou

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(659, 498)
        MainWindow.setStyleSheet("background: rgb(232, 230, 255);\n"
"")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.lb_imagemTreino = QtWidgets.QLabel(self.centralwidget)
        self.lb_imagemTreino.setGeometry(QtCore.QRect(20, 100, 280, 280))
        self.lb_imagemTreino.setText("")
        self.lb_imagemTreino.setPixmap(QtGui.QPixmap("Imagens/semImagem.png"))
        self.lb_imagemTreino.setObjectName("lb_imagemTreino")
        self.lb_imagemTeste = QtWidgets.QLabel(self.centralwidget)
        self.lb_imagemTeste.setGeometry(QtCore.QRect(350, 100, 280, 280))
        self.lb_imagemTeste.setText("")
        self.lb_imagemTeste.setPixmap(QtGui.QPixmap("Imagens/semImagem.png"))
        self.lb_imagemTeste.setObjectName("lb_imagemTeste")
        self.lb_titulo = QtWidgets.QLabel(self.centralwidget)
        self.lb_titulo.setGeometry(QtCore.QRect(90, 10, 491, 31))
        font = QtGui.QFont()
        font.setPointSize(24)
        self.lb_titulo.setFont(font)
        self.lb_titulo.setObjectName("lb_titulo")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(20, 40, 611, 20))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(310, 110, 20, 271))
        self.line_2.setStyleSheet("")
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.bt_imagemTreino = QtWidgets.QPushButton(self.centralwidget)
        self.bt_imagemTreino.setGeometry(QtCore.QRect(20, 60, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.bt_imagemTreino.setFont(font)
        self.bt_imagemTreino.setStyleSheet("background: rgb(255, 255, 255);")
        self.bt_imagemTreino.setObjectName("bt_imagemTreino")
        self.lb_treino = QtWidgets.QLabel(self.centralwidget)
        self.lb_treino.setGeometry(QtCore.QRect(120, 60, 101, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lb_treino.setFont(font)
        self.lb_treino.setObjectName("lb_treino")
        self.bt_imagemTreino_2 = QtWidgets.QPushButton(self.centralwidget)
        self.bt_imagemTreino_2.setGeometry(QtCore.QRect(350, 60, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.bt_imagemTreino_2.setFont(font)
        self.bt_imagemTreino_2.setStyleSheet("background: rgb(255, 255, 255);")
        self.bt_imagemTreino_2.setObjectName("bt_imagemTreino_2")
        self.lb_teste = QtWidgets.QLabel(self.centralwidget)
        self.lb_teste.setGeometry(QtCore.QRect(450, 60, 101, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lb_teste.setFont(font)
        self.lb_teste.setObjectName("lb_teste")
        self.line_3 = QtWidgets.QFrame(self.centralwidget)
        self.line_3.setGeometry(QtCore.QRect(20, 380, 611, 20))
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.bt_predizer = QtWidgets.QPushButton(self.centralwidget)
        self.bt_predizer.setGeometry(QtCore.QRect(540, 400, 91, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.bt_predizer.setFont(font)
        self.bt_predizer.setStyleSheet("background: rgb(255, 255, 255);")
        self.bt_predizer.setObjectName("bt_predizer")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setEnabled(False)
        self.lineEdit.setGeometry(QtCore.QRect(152, 410, 381, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit.setFont(font)
        self.lineEdit.setStyleSheet("background: rgb(255, 255, 255)")
        self.lineEdit.setObjectName("lineEdit")
        self.lb_resultado = QtWidgets.QLabel(self.centralwidget)
        self.lb_resultado.setGeometry(QtCore.QRect(30, 410, 121, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lb_resultado.setFont(font)
        self.lb_resultado.setObjectName("lb_resultado")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 659, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.lb_titulo.setText(_translate("MainWindow", "Sistema de reconhecimento facial"))
        self.bt_imagemTreino.setText(_translate("MainWindow", "Carregar"))
        self.lb_treino.setText(_translate("MainWindow", "Imagem Treino"))
        self.bt_imagemTreino_2.setText(_translate("MainWindow", "Carregar"))
        self.lb_teste.setText(_translate("MainWindow", "Imagem Teste"))
        self.bt_predizer.setText(_translate("MainWindow", "Predizer"))
        self.lb_resultado.setText(_translate("MainWindow", "Resultado predição:"))

        ### Botões Sistemas ###
        self.bt_imagemTreino.clicked.connect(self.imagemTreino) # Esse é de treino
        self.bt_imagemTreino_2.clicked.connect(self.imagemTeste) # Esse é de teste
        self.bt_predizer.clicked.connect(self.predizer)

    ### Função do sistema ###
    # Carrega imagem Treino #
    def imagemTreino(self):
        Tk().withdraw()
        path = askopenfilename()
        arquivo = path.split('Imagens/')
        listaTreino = arquivo[1].split('.')
        global imgTreino 
        imgTreino = listaTreino[0]
        urlTreino = 'Imagens/' + imgTreino +'.png'
        self.lb_imagemTreino.setPixmap(QtGui.QPixmap(urlTreino))
        imgTreino = face_recognition.load_image_file(path)

    # Carrega imagem Teste #
    def imagemTeste(self):
        Tk().withdraw()
        path = askopenfilename()
        arquivo = path.split('Imagens/')
        listaTeste = arquivo[1].split('.')
        global imgTeste 
        imgTeste = listaTeste[0]
        urlTeste = 'Imagens/' + imgTeste +'.png'
        self.lb_imagemTeste.setPixmap(QtGui.QPixmap(urlTeste))
        imgTeste = face_recognition.load_image_file(path)
    ## Predição de Imagens ###
    def predizer(self):
        # Cortar imagem #
        treino_rgb = cv2.cvtColor(imgTreino, cv2.COLOR_BGR2RGB)
        teste_rgb = cv2.cvtColor(imgTeste, cv2.COLOR_BGR2RGB)
        locations_treino = face_recognition.face_locations(treino_rgb)
        locations_teste = face_recognition.face_locations(teste_rgb)

        for top, right, bottom , left in locations_treino:
            crop_treino = treino_rgb[top:bottom, left:right]
            cv2.imwrite('crop_treino.png', crop_treino)
        for top, right, bottom , left in locations_teste:
            crop_teste = teste_rgb[top:bottom, left:right]
            cv2.imwrite('crop_teste.png', crop_teste)
        cv2.imshow('crop_treino', crop_treino)
        cv2.imshow('crop_teste', crop_teste)
        # Carrega imagens para predição #
        my_face_encoding = face_recognition.face_encodings(imgTreino)[0]
        unknown_face_encoding = face_recognition.face_encodings(imgTeste)[0]
        # Predição #
        results = face_recognition.compare_faces([my_face_encoding], unknown_face_encoding)
        if results[0] == True:
            resultado = 'As imagens são da mesma pessoa'
            self.lineEdit.setText(resultado)
        else:
            resultado = 'As imagens não são da mesma pessoa'
            self.lineEdit.setText(resultado)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
